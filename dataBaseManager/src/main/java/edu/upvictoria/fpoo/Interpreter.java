package edu.upvictoria.fpoo;

import java.io.File;

/**
 * This class will interpret the abstract syntax tree generated by the parser
 */
/**
 * Voy a llamar a tabla, tabla debe de recibir un archivo csv, luego debe de
 * transformar el archivo csv en una tabla
 */
public class Interpreter
        implements Clause.Visitor<Void>
    // , Expression.Visitor<Object>
{
    private String path;

    void interpret(Clause clause) {
        excecute(clause);
    }

    private void excecute(Clause clause) {
        clause.accept(this);
    }

    // Use clause
    @Override
    public Void useClause(Clause.UseClause clause) {
        File file = new File(clause.path);
        
        // check if the path exists
        if (!file.exists()) {
            throw new RuntimeException("The path does not exist");
        } 

        // check if there are files in the path
        File[] files = file.listFiles();
        if (files != null) {
            for (File f : files) {
                if (f.isFile() && f.getName().toUpperCase().endsWith(".csv")) {
                    System.out.println("Found CSV file: " + f.getName());
                }
            }
        }

        path = clause.path;

        return null;
    }

    // create Clause
    @Override
    public Void createClause(Clause.CreateClause clause) {
        /**
         * check if the table exists
         * if it does not exist create it
         * if it exists throw an error
         */
        File file = new File(path + clause.name + ".csv");
        if (file.exists()) {
            throw new RuntimeException("The table already exists");
        }

        // create the table
        Table table = new Table(file);

        // TODO: create the table and do all that stuff
        return null;
    }

    // select clause
    @Override
    public Void selectClause(Clause.SelectClause clause) {
        

        return null;
    }

    // drop clause
    @Override
    public Void dropClause(Clause.DropClause clause) {
        return null;
    }
}
